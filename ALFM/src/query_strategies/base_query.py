"""Abstract base class for Active Learning query methods."""


import abc

import numpy as np
from numpy.typing import NDArray
from pytorch_lightning import LightningModule


class BaseQuery(metaclass=abc.ABCMeta):
    """This class provides the blueprint for different intial query methods."""

    def __init__(self) -> None:
        """Intialize the class at iteration 1."""
        self.iteration = 1

    def update_state(
        self,
        iteration: int,
        features: NDArray[np.float32],
        labels: NDArray[np.int64],
        labeled_pool: NDArray[np.bool_],
        model: LightningModule,  # change this to ALModule later
    ) -> None:
        """Update the experiment state for the query function.

        Args:
            iteration (int): The current AL iteration
            features (NDArray[np.float32]): The input features generated by the updated model.
            labels (NDArray[np.int64]): The corresponding labels of the input features.
            labeled_pool (NDArray[np.bool_]): The mask representing the labeled pool.
            model (LightningModule): The updated current model.
        """
        self.iteration = iteration
        self.features = features
        self.labels = labels
        self.labeled_pool = labeled_pool
        self.model = model

    @abc.abstractmethod
    def query(self, num_samples: int) -> NDArray[np.bool_]:
        """Select a new set of datapoints to be labeled.

        Args:
            num_samples (int): The number of samples to select.

        Returns:
            NDArray[np.bool_]: A boolean mask for the selected samples.
        """
        pass
